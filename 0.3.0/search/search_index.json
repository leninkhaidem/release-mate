{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Release Mate","text":"<p>Quick Start</p> <p>New to Release Mate? Check out our Quick Start Guide to get up and running in minutes!</p> <p>Release Mate is a powerful Python-based tool designed to simplify release and changelog management for multi-project, multi-branch repositories. Powered by Python Semantic Release, it automates versioning, generates consistent changelogs, and streamlines the release process across multiple projects and branches within a single Git repository.</p> <p>Important</p> <p>Release Mate relies on (python-semantic-release) to manage versioning. Multi branch / project support is fulfiled by managing multiple configuration files in the <code>.release-mate</code> directory, and using them to manage different projects.</p>"},{"location":"#key-features","title":"Key Features","text":"Feature Description Multi-Project Support Manage releases for multiple projects within a single repository Automated Versioning Automatic version bumping based on conventional commits Changelog Generation Generate consistent changelogs across all your projects Branch Management Handle releases across different branches with ease Conventional Commits Built-in support for Angular-style conventional commits"},{"location":"#why-release-mate","title":"Why Release Mate?","text":"<p>Problem</p> <p>Managing releases and changelogs in a multi-project repository can be complex and time-consuming.</p> <p>Release Mate solves these challenges by:</p> <ul> <li>\u2728 Automating version management</li> <li>\ud83d\udcdd Generating standardized changelogs</li> <li>\ud83d\udd04 Supporting multiple projects and branches</li> <li>\ud83c\udfaf Ensuring consistency in release processes</li> <li>\ud83d\ude80 Streamlining CI/CD integration</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v030-2025-02-16","title":"v0.3.0 (2025-02-16)","text":""},{"location":"CHANGELOG/#chores","title":"Chores","text":"<ul> <li> <p>pyproject: Update GitHub token environment variable for publishing   (<code>4bc5a72</code>)</p> </li> <li> <p>Changed environment variable from GH_TOKEN to GH_TOKEN_PUB</p> </li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li> <p>Add new options for version command in CLI reference   (<code>6943dc1</code>)</p> </li> <li> <p>Add <code>--[no-]vcs-release</code> to control VCS release creation.</p> </li> <li> <p>Introduce <code>--as-prerelease</code> and <code>--prerelease-token</code> for prerelease versions.</p> </li> <li> <p>Include <code>--build-metadata</code> for appending build metadata.</p> </li> <li> <p>Add <code>--skip-build</code> to skip building during version updates.</p> </li> <li> <p>cli: Update quick start and user guide for publish command   (<code>2e95b22</code>)</p> </li> <li> <p>Added <code>release-mate publish</code> command to quick start guide</p> </li> <li> <p>Introduced detailed section on publishing releases in user guide</p> </li> <li> <p>Included examples for using the publish command with options</p> </li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li> <p>api, cli: Add additional options for versioning   (<code>4cc530c</code>)</p> </li> <li> <p>Introduced <code>vcs_release</code> option to control VCS release creation.</p> </li> <li> <p>Added <code>as_prerelease</code>, <code>prerelease_token</code>, <code>build_metadata</code>, and <code>skip_build</code> options for enhanced   versioning flexibility.</p> </li> </ul>"},{"location":"CHANGELOG/#testing","title":"Testing","text":"<ul> <li> <p>cli: Enhance version argument tests with additional flags   (<code>2533c12</code>)</p> </li> <li> <p>Added tests for new versioning flags including <code>as_prerelease</code>, <code>prerelease_token</code>,   <code>build_metadata</code>, and <code>skip_build</code>.</p> </li> <li> <p>Updated existing tests to reflect changes in the <code>build_version_args</code> function.</p> </li> </ul>"},{"location":"CHANGELOG/#v020-2025-02-15","title":"v0.2.0 (2025-02-15)","text":""},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li> <p>api, cli: Add publish command and improve error handling   (<code>34e4516</code>)</p> </li> <li> <p>Introduced a new publish command in the CLI for semantic-release.</p> </li> <li> <p>Enhanced error handling by suppressing exceptions in various functions.</p> </li> <li> <p>Refactored code for better readability and maintainability.</p> </li> <li> <p>api, cli: Add tag option to publish command   (<code>bb89924</code>)</p> </li> <li> <p>Enhanced the publish_worker function to accept an optional tag argument for release publishing.</p> </li> <li> <p>Updated the CLI command to include the new tag option for better release management.</p> </li> </ul>"},{"location":"CHANGELOG/#testing_1","title":"Testing","text":"<ul> <li> <p>cli: Add additional tests for publish functionality   (<code>69cc62d</code>)</p> </li> <li> <p>Implement tests for successful publish execution.</p> </li> <li> <p>Add tests for publish execution with specific tag.</p> </li> <li> <p>Include error handling tests for publish execution.</p> </li> <li> <p>Test publish with non-existent project.</p> </li> </ul>"},{"location":"CHANGELOG/#v015-2025-01-29","title":"v0.1.5 (2025-01-29)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>api: Improve shell completion installation robustness   (<code>d6c22a0</code>)</p> </li> <li> <p>Enhanced shell completion installation for bash, zsh, and fish shells</p> </li> <li> <p>Added conditional checks to prevent errors if command is not available</p> </li> <li> <p>Implemented error suppression and fallback mechanisms for completion script sourcing</p> </li> </ul>"},{"location":"CHANGELOG/#documentation_1","title":"Documentation","text":"<ul> <li>Updated docs formatting   (<code>c51f0e3</code>)</li> </ul>"},{"location":"CHANGELOG/#v014-2025-01-14","title":"v0.1.4 (2025-01-14)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li> <p>api, cli: Enhance worker initialization with template directory   (<code>dc195b3</code>)</p> </li> <li> <p>Updated the <code>init_worker</code> function in the API to accept a <code>template_dir</code> parameter, allowing for   more flexible template management. - Modified the CLI command to retrieve the template directory   using <code>pkg_resources</code> before invoking <code>init_worker</code>, improving code clarity and maintainability.</p> </li> </ul>"},{"location":"CHANGELOG/#code-style","title":"Code Style","text":"<ul> <li> <p>cli: Add help description for install_completion command   (<code>cd6c08c</code>)</p> </li> <li> <p>Enhanced the <code>install_completion</code> CLI command by adding a help description to clarify its purpose   for installing shell completion for bash, zsh, or fish shells.</p> </li> </ul>"},{"location":"CHANGELOG/#documentation_2","title":"Documentation","text":"<ul> <li>Updated docs for shell autocomplete   (<code>e5bcb7a</code>)</li> </ul>"},{"location":"CHANGELOG/#v013-2025-01-14","title":"v0.1.3 (2025-01-14)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li> <p>api: Streamline project directory handling in get_project_config to correctly identify poetry   project   (<code>d1fe900</code>)</p> </li> <li> <p>Updated the <code>get_project_config</code> function to normalize the project directory before checking for   Poetry configuration files.</p> </li> <li> <p>cli: Add shell completion installation command   (<code>6a91825</code>)</p> </li> <li> <p>Introduced a new CLI command <code>install_completion</code> to facilitate the installation of shell   completion for bash, zsh, and fish shells. - Implemented the <code>install_shell_completion</code> function   in the API to handle the detection of the shell type, update the appropriate rc file, and provide   user feedback on the installation status.</p> </li> </ul>"},{"location":"CHANGELOG/#v012-2025-01-14","title":"v0.1.2 (2025-01-14)","text":""},{"location":"CHANGELOG/#refactoring","title":"Refactoring","text":"<ul> <li> <p>Update worker initialization in CLI and API   (<code>291e2fb</code>)</p> </li> <li> <p>Refactored the <code>init_worker</code> function in the API to accept a <code>ProjectConfig</code> object instead of   individual parameters. - Modified the CLI command to retrieve the project configuration before   calling <code>init_worker</code>, improving code clarity and maintainability.</p> </li> </ul>"},{"location":"CHANGELOG/#v011-2025-01-14","title":"v0.1.1 (2025-01-14)","text":""},{"location":"CHANGELOG/#documentation_3","title":"Documentation","text":"<ul> <li> <p>Add support for custom configuration files in CLI commands   (<code>eb5caac</code>)</p> </li> <li> <p>Updated <code>release-mate version</code> and <code>release-mate changelog</code> commands to allow users to specify a   custom TOML configuration file path. - Included usage examples for custom configuration in the   documentation. - Enhanced clarity on how to utilize custom configurations outside of the default   <code>.release-mate</code> directory.</p> </li> <li> <p>Update README to include documentation link   (<code>4b333ac</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#refactoring_1","title":"Refactoring","text":"<ul> <li> <p>Move CLI logic to API module and clean up code   (<code>202b2ca</code>)</p> </li> <li> <p>Refactored the CLI commands to utilize a new <code>api</code> module, improving code organization and   maintainability. - Removed redundant functions from the CLI and replaced them with calls to the   <code>api</code> module. - Updated import statements across multiple files to reflect the new structure. -   Enhanced the <code>__init__.py</code> file to include the <code>api</code> module in the package's public API.</p> </li> </ul>"},{"location":"CHANGELOG/#v010-2025-01-14","title":"v0.1.0 (2025-01-14)","text":""},{"location":"CHANGELOG/#chores_1","title":"Chores","text":"<ul> <li>First draft   (<code>849e3e9</code>)</li> </ul>"},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li> <p>Enhance CLI initialization and configuration handling   (<code>69e1ef6</code>)</p> </li> <li> <p>Updated the initialization message to include a reminder for users to update the <code>build_command</code>   and <code>version_variables</code> in the configuration file. - Refactored the method for obtaining the   project configuration file to improve clarity and maintainability. - Added a new helper function   <code>_get_config_file</code> to streamline the process of retrieving the configuration file. - Initialized   <code>build_command</code> and <code>version_variables</code> in the project template to provide a clearer starting   point for users.</p> </li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Before installing Release Mate, ensure you have the following prerequisites:</p> <ul> <li>Python 3.9 or higher</li> <li>pip or poetry package manager</li> <li>Git installed and configured</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"pip install release-mate"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that Release Mate is installed correctly:</p> <pre><code>release-mate --version\n</code></pre>"},{"location":"getting-started/installation/#shell-completion","title":"Shell Completion","text":"<p>Release Mate supports command-line completion for bash, zsh, and fish shells. To enable it, simply run:</p> <pre><code>release-mate install-completion\n</code></pre> <p>This command will automatically install the appropriate shell completion for your current shell (bash, zsh, or fish). After installation, restart your shell or source your shell's config file to enable completion.</p>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>Release Mate automatically installs the following core dependencies:</p> Package Version Purpose click ^8.1.7 Command-line interface creation rich ^13.7.0 Rich text and formatting in terminal gitpython ^3.1.40 Git operations handling cookiecutter ^2.5.0 Project template management"},{"location":"getting-started/installation/#system-wide-vs-virtual-environment","title":"System-wide vs Virtual Environment","text":"<p>Best Practice</p> <p>We recommend installing Release Mate in a virtual environment to avoid conflicts with other Python packages.</p>"},{"location":"getting-started/installation/#using-venv","title":"Using venv","text":"<pre><code># Create a virtual environment\npython -m venv .venv\n\n# Activate the virtual environment\n# On Unix or MacOS:\nsource .venv/bin/activate\n# On Windows:\n.venv\\Scripts\\activate\n\n# Install Release Mate\npip install release-mate\n</code></pre>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Release Mate in just a few minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ol> <li>Python 3.9 or higher</li> <li>Git repository initialized</li> <li>Release Mate installed</li> </ol>"},{"location":"getting-started/quick-start/#5-minute-tutorial","title":"5-Minute Tutorial","text":""},{"location":"getting-started/quick-start/#1-initialize-your-project","title":"1. Initialize Your Project","text":"<pre><code># Navigate to your repository\ncd your-repository\n\n# Initialize Release Mate\nrelease-mate init\n</code></pre> <p>Note</p> <p>If no project ID is specified, Release Mate uses your current branch name as the project ID.</p> <p>Note</p> <p>If no directory is specified, Release Mate uses the current directory as the project directory.</p>"},{"location":"getting-started/quick-start/#2-make-some-changes","title":"2. Make Some Changes","text":"<p>Make changes to your code and commit them using conventional commits:</p> <pre><code># Feature commit\ngit commit -m \"feat: add user authentication\"\n\n# Bug fix commit\ngit commit -m \"fix: handle null user input\"\n</code></pre>"},{"location":"getting-started/quick-start/#3-create-a-release","title":"3. Create a Release","text":"<pre><code># Check what would change (dry run)\nrelease-mate version --noop\n\n# Create the actual release\nrelease-mate version\n</code></pre>"},{"location":"getting-started/quick-start/#4-generate-changelog","title":"4. Generate Changelog","text":"<pre><code>release-mate changelog\n</code></pre>"},{"location":"getting-started/quick-start/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/quick-start/#creating-a-feature-release","title":"Creating a Feature Release","text":"<pre><code># Add a new feature\ngit commit -m \"feat: add OAuth support\"\n\n# Create release\nrelease-mate version\n</code></pre>"},{"location":"getting-started/quick-start/#creating-a-bug-fix-release","title":"Creating a Bug Fix Release","text":"<pre><code># Fix a bug\ngit commit -m \"fix: prevent memory leak\"\n\n# Create release\nrelease-mate version\n</code></pre>"},{"location":"getting-started/quick-start/#creating-a-breaking-change","title":"Creating a Breaking Change","text":"<pre><code># Make breaking changes\ngit commit -m \"feat!: redesign API endpoints\n\nBREAKING CHANGE: Complete API redesign for v2\"\n\n# Create major release\nrelease-mate version\n</code></pre>"},{"location":"getting-started/quick-start/#project-structure","title":"Project Structure","text":"<p>After initialization, your repository will look like this:</p> <pre><code>your-repository/\n\u251c\u2500\u2500 .release-mate/\n\u2502   \u2514\u2500\u2500 your-project.toml    # Release Mate configuration\n\u251c\u2500\u2500 CHANGELOG.md             # Generated changelog\n\u2514\u2500\u2500 your-project-files/\n</code></pre> <p>Development Workflow</p> <ol> <li>Make changes to your code</li> <li>Commit using conventional commits</li> <li>Run <code>release-mate version --noop</code> to preview</li> <li>Run <code>release-mate version</code> to release</li> <li>Run <code>release-mate changelog</code> to generate changelog file</li> <li>Run <code>release-mate publish</code> to publish the release to your VCS</li> </ol>"},{"location":"reference/cli-commands/","title":"CLI Commands Reference","text":"<p>Release Mate provides a set of command-line tools to manage your project releases. Each command serves a specific purpose in the release management workflow.</p>"},{"location":"reference/cli-commands/#global-options","title":"Global Options","text":"<p>All Release Mate commands support the following global options:</p> <ul> <li><code>--help</code>: Show help message and exit</li> </ul>"},{"location":"reference/cli-commands/#init-command","title":"<code>init</code> Command","text":"<p>Purpose: Initialize and configure a new project for release management with Release Mate. This command sets up the necessary configuration files and establishes version tracking.</p> <p>Key Functions:</p> <ul> <li>Creates project-specific configuration in <code>.release-mate</code> directory</li> <li>Sets up version tracking for different file types</li> <li>Configures branch-specific release rules</li> <li>Establishes changelog generation settings</li> </ul> <pre><code>release-mate init [OPTIONS]\n</code></pre>"},{"location":"reference/cli-commands/#options","title":"Options","text":"Option Description <code>-i, --id TEXT</code> Project identifier (defaults to current branch name) <code>-v0, --current-version TEXT</code> Initial version (defaults to '0.0.0') <code>-d, --dir TEXT</code> Project directory (defaults to current directory)"},{"location":"reference/cli-commands/#examples","title":"Examples","text":"<pre><code># Initialize with default settings\nrelease-mate init\n\n# Initialize with custom project ID and directory\nrelease-mate init -i my-project -d ./packages/my-project\n\n# Initialize a version tracking configuration for an existing python project managed with poetry\nrelease-mate init -i python-pkg -d ./packages/python-pkg\n\n# Initialize with specific initial version\nrelease-mate init -i my-project -v0 1.0.0\n</code></pre>"},{"location":"reference/cli-commands/#version-command","title":"<code>version</code> Command","text":"<p>Purpose: Manage version numbers for a specific project based on conventional commits. This command analyzes commit messages to determine the appropriate version bump and handles all version-related operations.</p> <p>Key Functions:</p> <ul> <li>Analyzes commit messages since last release</li> <li>Determines appropriate version bump (major, minor, patch)</li> <li>Updates version numbers in configured files</li> <li>Creates git tags for releases</li> <li>Generates changelogs</li> <li>Pushes changes to remote repository</li> </ul> <pre><code>release-mate version [OPTIONS]\n</code></pre>"},{"location":"reference/cli-commands/#options_1","title":"Options","text":"<p>Note</p> <p>These options are the subset of options supported by python-semantic-release.</p> Option Description <code>-i, --id TEXT</code> Project identifier (defaults to current branch name) <code>--noop</code> Dry run without making any changes <code>--print</code> Print the next version and exit <code>--print-tag</code> Print the next version tag and exit <code>--print-last-released</code> Print the last released version and exit <code>--print-last-released-tag</code> Print the last released version tag and exit <code>--major</code> Force the next version to be a major release <code>--minor</code> Force the next version to be a minor release <code>--patch</code> Force the next version to be a patch release <code>--prerelease</code> Force the next version to be a prerelease <code>--[no-]commit</code> Whether to commit changes locally (default: true) <code>--[no-]tag</code> Whether to create a tag for the new version (default: true) <code>--[no-]changelog</code> Whether to update the changelog (default: true) <code>--[no-]push</code> Whether to push the new commit and tag to the remote (default: true) <code>--[no-]vcs-release</code> Whether to create a release in the remote VCS, if supported (default: true) <code>--as-prerelease</code> Ensure the next version to be released is a prerelease version <code>--prerelease-token</code> Force the next version to use this prerelease token, if it is a prerelease <code>--build-metadata</code> Build metadata to append to the new version <code>--skip-build</code> Skip building the current project <p>Using Custom Configuration File</p> <p>Instead of using the project ID, you can directly provide a path to a TOML configuration file. This allows you to use custom configuration files outside of the <code>.release-mate</code> directory: <pre><code>release-mate version -i /path/to/custom-config.toml\n</code></pre></p>"},{"location":"reference/cli-commands/#batch-version-command","title":"<code>batch-version</code> Command","text":"<p>Purpose: Efficiently manage version updates across multiple projects in a repository. This command automates the versioning process for all configured projects while maintaining their individual versioning rules.</p> <p>Key Functions:</p> <ul> <li>Processes all projects in the repository</li> <li>Handles branch switching automatically</li> <li>Maintains project-specific version rules</li> <li>Provides parallel version management</li> </ul> <pre><code>release-mate batch-version [OPTIONS]\n</code></pre>"},{"location":"reference/cli-commands/#options_2","title":"Options","text":"Option Description <code>--noop</code> Dry run without making any changes <code>--major</code> Force the next version to be a major release <code>--minor</code> Force the next version to be a minor release <code>--patch</code> Force the next version to be a patch release <code>--prerelease</code> Force the next version to be a prerelease <code>--[no-]commit</code> Whether to commit changes locally (default: true) <code>--[no-]tag</code> Whether to create a tag for the new version (default: true) <code>--[no-]changelog</code> Whether to update the changelog (default: true) <code>--[no-]push</code> Whether to push the new commit and tag to the remote (default: true)"},{"location":"reference/cli-commands/#changelog-command","title":"<code>changelog</code> Command","text":"<p>Purpose: Generate and manage project changelogs based on conventional commits. This command creates structured, readable changelogs and can integrate with remote repository release notes.</p> <p>Key Functions:</p> <ul> <li>Analyzes commit history</li> <li>Categorizes changes (features, fixes, breaking changes)</li> <li>Generates formatted changelog entries</li> <li>Updates changelog files</li> <li>Posts release notes to remote repositories</li> <li>Supports customizable templates</li> </ul> <p>note</p> <p>The changelog file is automatically generated by the <code>version</code> command in the corresponding project folder.</p> <pre><code>release-mate changelog [OPTIONS] [PROJECT_ID]\n</code></pre>"},{"location":"reference/cli-commands/#options_3","title":"Options","text":"<p>Note</p> <p>These options are the subset of options supported by python-semantic-release.</p> Option Description <code>--post-to-release-tag TAG</code> Post release notes to the remote VCS's release for this tag <code>--noop</code> Dry run without making any changes <p>Using Custom Configuration File</p> <p>Similar to the version command, you can directly provide a path to a TOML configuration file: <pre><code>release-mate changelog /path/to/custom-config.toml\n</code></pre></p>"},{"location":"reference/cli-commands/#publish-command","title":"<code>publish</code> Command","text":"<p>Purpose: Build and publish releases to your Version Control System (VCS). This command handles the distribution and publication of releases to your repository's release page.</p> <p>Key Functions:</p> <ul> <li>Builds project distributions</li> <li>Publishes releases to VCS (e.g., GitHub Releases)</li> <li>Supports publishing to specific tags</li> <li>Provides dry-run capabilities for testing</li> </ul> <pre><code>release-mate publish [OPTIONS]\n</code></pre>"},{"location":"reference/cli-commands/#options_4","title":"Options","text":"Option Description <code>-i, --id TEXT</code> Project identifier (defaults to current branch name) <code>--noop</code> Dry run without making any changes <code>--tag TAG</code> The tag associated with the release to publish to <p>Using Custom Configuration File</p> <p>Similar to other commands, you can directly provide a path to a TOML configuration file: <pre><code>release-mate publish -i /path/to/custom-config.toml\n</code></pre></p>"},{"location":"reference/cli-commands/#common-workflows","title":"Common Workflows","text":""},{"location":"reference/cli-commands/#initial-setup","title":"Initial Setup","text":"<pre><code># Initialize a new project\nrelease-mate init -i my-project -d ./src/my-project\n\n# Verify the configuration\ncat .release-mate/my-project.toml\n</code></pre>"},{"location":"reference/cli-commands/#version-bump-workflow","title":"Version Bump Workflow","text":"<pre><code># Check what the next version would be\nrelease-mate version -i my-project --noop\n\n# Perform the version bump\nrelease-mate version -i my-project\n\n# Generate and publish changelog\nrelease-mate changelog\n\n# Create a prerelease version\nrelease-mate version -i my-project --as-prerelease --prerelease-token=beta\n\n# Skip building during version update\nrelease-mate version -i my-project --skip-build\n\n# Append build metadata\nrelease-mate version -i my-project --build-metadata=001\n\n# Disable VCS release creation\nrelease-mate version -i my-project --no-vcs-release\n</code></pre>"},{"location":"reference/cli-commands/#using-custom-configuration","title":"Using Custom Configuration","text":"<pre><code># Use a custom configuration file for versioning\nrelease-mate version -i ./my-custom-config.toml\n\n# Generate changelog using custom configuration\nrelease-mate changelog ./my-custom-config.toml\n</code></pre>"},{"location":"reference/cli-commands/#batch-version-workflow","title":"Batch Version Workflow","text":"<pre><code># Check what would change across all projects\nrelease-mate batch-version --noop\n\n# Perform version bump for all projects\nrelease-mate batch-version\n\n# Generate changelog for a specific project in the current branch\nrelease-mate changelog\n</code></pre>"},{"location":"reference/commit-guidelines/","title":"Commit Guidelines","text":"<p>Release Mate uses the Angular-style conventional commits specification for automated versioning and changelog generation.</p>"},{"location":"reference/commit-guidelines/#commit-message-format","title":"Commit Message Format","text":"<p>Commit Structure</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>vscode users with copilot</p> <p>vscode with copilot supports generating conventional commit messages. It analyzes the changes for the commit and generates a commit message.</p>"},{"location":"reference/commit-guidelines/#commit-types","title":"Commit Types","text":"Type Description Version Impact <code>feat</code> New feature Minor (0.1.0) <code>fix</code> Bug fix Patch (0.0.1) <code>perf</code> Performance improvement Patch (0.0.1) <code>docs</code> Documentation only changes None <code>style</code> Code style changes (formatting, etc) None <code>refactor</code> Code refactoring None <code>test</code> Adding or updating tests None <code>build</code> Build system or dependencies None <code>ci</code> CI/CD changes None <code>chore</code> Other changes None"},{"location":"reference/commit-guidelines/#breaking-changes","title":"Breaking Changes","text":"<p>Breaking Changes</p> <p>Breaking changes MUST be indicated by adding <code>!</code> after the type/scope or by adding <code>BREAKING CHANGE:</code> in the footer. <pre><code>feat!: remove deprecated API\n</code></pre> This will trigger a major version bump (1.0.0).</p>"},{"location":"reference/commit-guidelines/#examples","title":"Examples","text":""},{"location":"reference/commit-guidelines/#feature-addition","title":"Feature Addition","text":"<pre><code>feat(auth): add OAuth2 authentication\n\nImplements OAuth2 authentication flow using the following providers:\n- Google\n- GitHub\n- GitLab\n\nCloses #123\n</code></pre>"},{"location":"reference/commit-guidelines/#bug-fix","title":"Bug Fix","text":"<pre><code>fix(parser): handle empty commit messages\n\nPreviously, empty commit messages would cause the parser to crash.\nNow it properly handles empty messages by skipping them.\n</code></pre>"},{"location":"reference/commit-guidelines/#breaking-change","title":"Breaking Change","text":"<pre><code>feat(api)!: rename authentication endpoints\n\nBREAKING CHANGE: The authentication endpoints have been renamed to follow\nREST conventions. Old endpoints will be removed in the next major version.\n\n- /auth/login -&gt; /auth/token\n- /auth/logout -&gt; /auth/token/revoke\n</code></pre>"},{"location":"reference/commit-guidelines/#scope-guidelines","title":"Scope Guidelines","text":"<p>The scope should be one of the following:</p> <ul> <li>Name of the project component</li> <li>Name of the module</li> <li>Name of the feature</li> <li>Name of the package</li> </ul> <p>Examples: - <code>feat(cli): add new command</code> - <code>fix(parser): handle edge case</code> - <code>docs(api): update endpoint documentation</code></p>"},{"location":"reference/commit-guidelines/#best-practices","title":"Best Practices","text":"<ol> <li>Keep the first line under 72 characters</li> <li>Use imperative mood in the description</li> <li>Don't end the description with a period</li> <li>Separate subject from body with a blank line</li> <li>Use the body to explain what and why vs. how</li> </ol> <p>Commit Message Template</p> <p>You can set up a commit message template: <pre><code>git config --global commit.template ~/.gitmessage\n</code></pre></p> <p>Template content: <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre></p>"},{"location":"reference/commit-guidelines/#version-bumping-rules","title":"Version Bumping Rules","text":"<p>Release Mate follows these rules for version bumping:</p> <ol> <li>Breaking changes (with <code>!</code> or <code>BREAKING CHANGE</code>) trigger a major version bump</li> <li><code>feat</code> type triggers a minor version bump</li> <li><code>fix</code> and <code>perf</code> types trigger a patch version bump</li> <li>Other types don't trigger version bumps</li> </ol> <p>Version Format</p> <p>Release Mate follows semantic versioning (MAJOR.MINOR.PATCH) </p>"},{"location":"user-guide/project-setup/","title":"Project Setup","text":"<p>This guide will walk you through setting up a project with Release Mate.</p>"},{"location":"user-guide/project-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ol> <li>A Git repository initialized</li> <li>Conventional commits (Angular style) is followed</li> <li>Release Mate installed in your environment</li> </ol>"},{"location":"user-guide/project-setup/#initializing-a-project","title":"Initializing a Project","text":"<p>To initialize a project with Release Mate, use the <code>init</code> command:</p> <pre><code>release-mate init -d &lt;project-directory&gt;\n</code></pre>"},{"location":"user-guide/project-setup/#options","title":"Options","text":"<ul> <li><code>-i, --id</code>: Project identifier (defaults to current branch name)</li> <li><code>-d, --dir</code>: Project directory (defaults to current directory)</li> <li><code>-v0, --current-version</code>: Initial version (defaults to '0.0.0')</li> </ul>"},{"location":"user-guide/project-setup/#example","title":"Example","text":"<pre><code># Initialize a project in the current directory\nrelease-mate init -i my-project\n\n# Initialize a project in a specific directory with initial version\nrelease-mate init -i my-project -d ./packages/my-project -v0 1.0.0\n\n# Initialize a Python project with poetry syntax\nrelease-mate init -i python-pkg -p\n</code></pre>"},{"location":"user-guide/project-setup/#configuration-file","title":"Configuration File","text":"<p>The <code>init</code> command creates a configuration file in the <code>.release-mate</code> directory:</p> <pre><code>.release-mate/\n\u2514\u2500\u2500 my-project.toml\n</code></pre> <p>This file contains all the necessary settings for your project, including:</p> <ul> <li>Branch configuration</li> <li>Commit message parsing rules</li> <li>Version bump rules</li> <li>Changelog generation settings</li> </ul>"},{"location":"user-guide/project-setup/#multiple-projects-setup","title":"Multiple Projects Setup","text":"<p>Release Mate supports managing multiple projects within a single repository</p> <p>Each branch is isolated to manage one project, along with its unique changelog and version file. For N projects, there are N branches, ensuring clear separation of code, versions, and updates.</p> <pre><code>*---* Main Branch (Base) -----------------------------------\n     \\\n      \\-- Branch A (Project A)\n           |--- Code A\n           |--- Changelog A\n           |--- Version A\n\n      \\-- Branch B (Project B)\n           |--- Code B\n           |--- Changelog B\n           |--- Version B\n\n      \\-- Branch N (Project N)\n           |--- Code N\n           |--- Changelog N\n           |--- Version N\n</code></pre> <p>Important</p> <p>Branch A, B .. N should be protected. Version bump should ideally be done after successful regression.</p>"},{"location":"user-guide/project-setup/#example-multi-project-setup","title":"Example Multi-Project Setup","text":"<p>Execute the below commands in corresponding branches.</p> <pre><code># Initialize first project. \nrelease-mate init -d ./packages/project1 \n\n# Initialize second project\nrelease-mate init -d ./packages/project2\n\n# Initialize third project with different initial version\nrelease-mate init -d ./packages/project3 -v0 1.0.0\n</code></pre>"},{"location":"user-guide/project-setup/#publishing-releases","title":"Publishing Releases","text":"<p>Release Mate supports publishing your project releases to your Version Control System (e.g., GitHub Releases). This is typically done after version bumps and changelog generation.</p> <pre><code># Publish the latest release\nrelease-mate publish -i my-project\n\n# Dry run to see what would be published\nrelease-mate publish -i my-project --noop\n\n# Publish a specific tag\nrelease-mate publish -i my-project --tag v1.0.0\n</code></pre> <p>Tip</p> <p>Always use the <code>--noop</code> flag first to preview the changes before actual publishing.</p> <p>When publishing a release, Release Mate will:</p> <ol> <li>Build your project distribution (if applicable)</li> <li>Upload the built artifacts to your VCS release page</li> <li>Attach the corresponding changelog section to the release notes</li> </ol>"}]}